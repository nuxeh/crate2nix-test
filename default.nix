
# Generated by crate2nix 0.1.0 with the command:
#   "generate"
# See https://github.com/kolloch/crate2nix for more info.

{ pkgs? import <nixpkgs> { config = {}; },
  lib? pkgs.lib,
  callPackage? pkgs.callPackage,
  stdenv? pkgs.stdenv,
  buildRustCrate? pkgs.buildRustCrate,
  fetchurl? pkgs.fetchurl }:

rec {
    root_crate = crates."crate2nix-test 0.1.0 (path+file:///home/ed/git/crate2nix-test)";
    crates = {
        "crate2nix-test 0.1.0 (path+file:///home/ed/git/crate2nix-test)"
            = buildRustCrate {
                crateName = "crate2nix-test";
                version = "0.1.0";
                edition = "2018";
                src = (builtins.filterSource sourceFilter ./.);
                authors = [
                    "Ed Cragg <drq.11235@gmail.com>"
                ];
                dependencies = [
                    crates."new_debug_unreachable 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)"
                ];
            };
        "new_debug_unreachable 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)"
            = buildRustCrate {
                crateName = "new_debug_unreachable";
                version = "1.0.3";
                edition = "2015";
                sha256 = "1lxbd0n9gwvzg41bxiij0c28g1sp1jhp4h1rh10qisc8viyhsdj0";
                libPath = "src/lib.rs";
                authors = [
                    "Matt Brubeck <mbrubeck@limpet.net>"
                    "Jonathan Reem <jonathan.reem@gmail.com>"
                ];
            };
    };

    # Utility functions

    # sourceFilter: Filters common temp files and build files
    # TODO(pkolloch): Substitute with gitignore filter
    sourceFilter = name: type:
        let baseName = builtins.baseNameOf (builtins.toString name);
        in ! (
          # Filter out git
          baseName == ".gitignore" ||
          (type == "directory" && baseName == ".git" ) ||

          # Filter out build results
          (type == "directory" && (
            baseName == "target" ||
            baseName == "_site" ||
            baseName == ".sass-cache" ||
            baseName == ".jekyll-metadata" ||
            baseName == "build-artifacts"
            )) ||

          # Filter out nix-build result symlinks
          (type == "symlink" && lib.hasPrefix "result" baseName) ||

          # Filter out IDE config
          (type == "directory" && (
            baseName == ".idea" ||
            baseName == ".vscode"
            )) ||
          lib.hasSuffix ".iml" baseName ||

          # Filter out nix build files
          lib.hasSuffix ".nix" baseName ||

          # Filter out editor backup / swap files.
          lib.hasSuffix "~" baseName ||
          builtins.match "^\\.sw[a-z]$" baseName != null ||
          builtins.match "^\\..*\\.sw[a-z]$" baseName != null ||
          lib.hasSuffix ".tmp" baseName ||
          lib.hasSuffix ".bak" baseName
        );

}
